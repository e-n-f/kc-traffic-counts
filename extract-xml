#!/usr/bin/perl

use strict;

my %lat;
my %lon;
open(IN, "Traffic_Counts_at_Signals.csv");
while (<IN>) {
	if (/"\(([0-9.-]+), ([0-9.-]+)\)",https?:\/\/data.kcmo.org\/Traffic\/([^\/]*)/) {
		$lat{$3} = $1;
		$lon{$3} = $2;
	}
}
close(IN);

my @x = ();
my @y = ();
my @min = ();
my @max = ();
my @top = ();
my @bot = ();
my @text = ();
my $group = "";
my $date = "";
my $street = "";
my %warn;
my %used;

while (<>) {
	s/<[bi]>//g;
	s/<\/[bi]>//g;

	$warn{$ARGV} = 1;

	if (/<text top="([0-9]+)" left="([0-9]+)" width="([0-9]+)" height="([0-9]+)" font="[^"]*">(.*)<\/text>/) {
		my $x = $2 + $3 / 2;
		my $y = $1 + $4 / 2;
		my $text = $5;

		$text =~ s/&gt;/>/g;
		$text =~ s/&lt;/</g;
		$text =~ s/&amp;/\&/g;

		push @x, $x;
		push @y, $y;
		push @min, $2;
		push @max, $2 + $3;
		push @top, $1;
		push @bot, $1 + $4;
		push @text, $text;
	}

	if (/<\/page/) {
		my $i;

		my $rot = 0;
		my $rrot = 0;
		my $ok = 0;
		for ($i = 1; $i <= $#text; $i++) {
			if ($y[$i] < $y[$i - 1] && $min[$i] == $min[$i - 1]) {
				$rot++;
			} elsif ($y[$i] > $y[$i - 1] && $min[$i] == $min[$i - 1]) {
				$rrot++;
			} else {
				$ok++;
			}
		}

		# print STDERR "page: $rot $rrot $ok\n";

		if ($rot > $ok) {
			my $max = 0;
			my $bot = 0;
			for ($i = 0; $i <= $#text; $i++) {
				if ($max[$i] > $max) {
					$max = $max[$i];
				}
				if ($bot[$i] > $bot) {
					$bot = $bot[$i];
				}
			}

			for ($i = 0; $i <= $#text; $i++) {
				my $bmin = $bot - $bot[$i];
				my $bmax = $bot - $top[$i];
				my $btop = $min[$i];
				my $bbot = $max[$i];

				$min[$i] = $bmin;
				$max[$i] = $bmax;
				$top[$i] = $btop;
				$bot[$i] = $bbot;
				$x[$i] = ($bmin + $bmax) / 2;
				$y[$i] = ($btop + $bbot) / 2;

				# print "$bmin,$btop to $bmax,$bbot\n";
			}
		} elsif ($rrot > $ok) {
			my $max = 0;
			my $bot = 0;
			for ($i = 0; $i <= $#text; $i++) {
				if ($max[$i] > $max) {
					$max = $max[$i];
				}
				if ($bot[$i] > $bot) {
					$bot = $bot[$i];
				}
			}

			for ($i = 0; $i <= $#text; $i++) {
				my $bmin = $top[$i];
				my $bmax = $bot[$i];
				my $btop = $max - $min[$i];
				my $bbot = $max - $max[$i];

				$min[$i] = $bmin;
				$max[$i] = $bmax;
				$top[$i] = $btop;
				$bot[$i] = $bbot;
				$x[$i] = ($bmin + $bmax) / 2;
				$y[$i] = ($btop + $bbot) / 2;

				# print "$bmin,$btop to $bmax,$bbot\n";
			}
		}

		PAGE:
		for ($i = 0; $i <= $#text; $i++) {
			if ($text[$i] =~ /Start Date\s*:\s*(.*)/) {
				$date = $1;
				$date =~ s/,/ /g;
			}

			if ($text[$i] =~ /Groups *Printed *-? *(.*)/ ||
			    $text[$i] =~ /Turning *Movement *Data/) {
				my @streets = ();
				my @directions = ();
				my @directionx = ();

				if ($text[$i] =~ /Turning *Movement *Data/) { 
					$i++;
					$group = "x";

					if ($text[$i] =~ /Start Time/) {
						$i++;
					}

					for (; $i <= $#text; $i++) {
						if ($text[$i] =~ /bound *$/i || $text[$i] =~ /\([NSEW]B\) *$/ || $text[$i] =~ /^From/i || $text[$i] =~ /Leg *$/i) {
							last;
						}

						push @streets, $text[$i];
					}
					for (; $i <= $#text; $i++) {
						unless ($text[$i] =~ /bound *$/i || $text[$i] =~ /\([NSEW]B\) *$/ || $text[$i] =~ /^From/i || $text[$i] =~ /Leg *$/i) {
							last;
						}

						push @directions, $text[$i];
						$directions[$#directions] =~ s/ *$//;
						push @directionx, $x[$i];
					}
				} else {
					$group = $1;
					$group =~ s/ +/ /g;
					$group =~ s/,/ /g;
					# print "$ARGV\n";
					# print "$group\n";

					{
						my $y = $y[$i];
						$i++;

						while ($i <= $#text && $y[$i] < $y) {
							$i++;
						}
					}

					my $direction = 0;
					my $prevx = 0;
					my $prevy = 0;
					for (; $i <= $#text; $i++) {
						if ($text[$i] =~ /bound *$/i || $text[$i] =~ /\([NSEW]B\) *$/ || $text[$i] =~ /^From/i || $text[$i] =~ /Leg *$/i || $text[$i] =~ /Approach *$/i) {
							$directions[$direction] = $text[$i];
							$directions[$direction] =~ s/ *$//;
							$directionx[$direction] = $x[$i];

							if ($text[$i] eq "From") {
								$directions[$direction] .= " $text[$i + 1]";
								$i++;
							}

							$directions[$direction] =~ s/ *- *//g;
							$directions[$direction] =~ s/ *\([NSEW]B\) *//g;
							$directions[$direction] =~ s/ *Approach *//g;
							$directions[$direction] =~ s/From Northeast/Southwestbound/gi;
							$directions[$direction] =~ s/From Southeast/Northwestbound/gi;
							$directions[$direction] =~ s/From Northwest/Southeastbound/gi;
							$directions[$direction] =~ s/From Southwest/Northeastbound/gi;
							$directions[$direction] =~ s/From North/Southbound/gi;
							$directions[$direction] =~ s/From South/Northbound/gi;
							$directions[$direction] =~ s/From East/Westbound/gi;
							$directions[$direction] =~ s/From West/Eastbound/gi;
							$directions[$direction] =~ s/From the North/Southbound/gi;
							$directions[$direction] =~ s/From the South/Northbound/gi;
							$directions[$direction] =~ s/From the East/Westbound/gi;
							$directions[$direction] =~ s/From the West/Eastbound/gi;
							$directions[$direction] =~ s/North Leg/Southbound/gi;
							$directions[$direction] =~ s/South Leg/Northbound/gi;
							$directions[$direction] =~ s/East Leg/Westbound/gi;
							$directions[$direction] =~ s/West Leg/Eastbound/gi;
							$directions[$direction] =~ s/NORTHBOUND/Northbound/gi;
							$directions[$direction] =~ s/SOUTHBOUND/Southbound/gi;
							$directions[$direction] =~ s/\bEASTBOUND/Eastbound/gi;
							$directions[$direction] =~ s/\bWESTBOUND/Westbound/gi;
							$directions[$direction] =~ s/\bNorth Bound/Northbound/gi;
							$directions[$direction] =~ s/\bSouth Bound/Southbound/gi;
							$directions[$direction] =~ s/\bEast Bound/Eastbound/gi;
							$directions[$direction] =~ s/\bWest Bound/Westbound/gi;
							$directions[$direction] =~ s/\bNothbound/Northbound/gi;

							$prevy = 0;
							$direction++;
						} elsif ($text[$i] =~ /Start/) {
							last;
						} else {
							if ($y[$i] <= $prevy) {
								$directionx[$direction] = $prevx;
								$directions[$direction] = "Not specified";
								$direction++;
							}

							if ($streets[$direction] eq "") {
								$streets[$direction] = $text[$i];
							} else {
								$streets[$direction] .= " $text[$i]";
							}

							$prevx = $x[$i];
							$prevy = $y[$i];
							$directionx[$direction] = $x[$i]; # Usually overwritten
						}
					}
				}

				$street = "";
				my %street = ();

				for (my $x = 0; $x <= $#streets; $x++) {
					$streets[$x] =~ s/ *$//;
					$streets[$x] =~ s/ +/ /g;
					$streets[$x] =~ s/,/ /g;

                                        if ($streets[$x] ne "" && !defined($street{$streets[$x]})) {
                                                if ($street eq "") {
                                                        $street = $streets[$x];
                                                } else {
                                                        $street .= " / $streets[$x]";
                                                }
                                                $street{$streets[$x]} = 1;
                                        }
					# print "$streets[$x]: $directions[$x] $directionx[$x]\n";
				}

				if ($text[$i] =~ /Start/) {
					$i++;
				}
				if ($text[$i] =~ /Time/) {
					$i++;
				}

				my @cols = ();
				my @colmin = ();
				my @colmax = ();
				for (; $i <= $#text; $i++) {
					last if $text[$i] =~ /\d:\d\d/;
					last if $text[$i] =~ /Factor/;
					last if $text[$i] =~ /BREAK/;

					if ($#colmin >= 0 &&
					    ! ($min[$i] > $colmax[$#colmax] || $max[$i] < $colmin[$#colmin])) {
						$cols[$#cols] .= $text[$i];
						if ($min[$i] < $colmin[$#colmin]) {
							$colmin[$#colmin] = $min[$i];
						}
						if ($max[$i] > $colmax[$#colmax]) {
							$colmax[$#colmax] = $max[$i];
						}
					} elsif ($max[$i] < $colmin[$#colmin]) {
						last;
					} else {
						push @cols, $text[$i];
						push @colmin, $min[$i];
						push @colmax, $max[$i];
					}
				}

				my @coldir = ();
				for (my $x = 0; $x <= $#cols; $x++) {
					$cols[$x] =~ s/ *$//;
					$cols[$x] =~ s/Rght/Right/gi;
					$cols[$x] =~ s/\bLT\b/Left/g;
					$cols[$x] =~ s/\bRT\b/Right/g;
					$cols[$x] =~ s/\bTH\b/Thru/g;
					$cols[$x] =~ s/\bBike\b/Bikes/g;
					$cols[$x] =~ s/\bPed\b/Peds/g;
					$cols[$x] =~ s/\bBikes on Road\b/Bikes/g;
					$cols[$x] =~ s/\bRIGHT\b/Right/g;
					$cols[$x] =~ s/\bTHRU\b/Thru/g;
					$cols[$x] =~ s/\bLEFT\b/Left/g;
					$cols[$x] =~ s/\bThrough\b/Thru/g;
					$cols[$x] =~ s/\bBicycle\b/Bikes/g;
					$cols[$x] =~ s/\bThroug h\b/Thru/g;
					$cols[$x] =~ s/\bBikes on CW\b/Bikes/g;
					$cols[$x] =~ s/\bBicycles\b/Bikes/g;
					$cols[$x] =~ s/\bThr\b/Thru/g;
					$cols[$x] =~ s/\bRig\b/Right/g;
					$cols[$x] =~ s/\bRt\b/Right/g;
					$cols[$x] =~ s/\bBikes on road\b/Bikes/g;
					$cols[$x] =~ s/\bBikes on RD\b/Bikes/g;
					$cols[$x] =~ s/\bPEDS\b/Peds/g;
					$cols[$x] =~ s/\bBIKES\b/Bikes/g;
					$cols[$x] =~ s/\bPedestrians\b/Peds/g;
					$cols[$x] =~ s/\bBike on Road\b/Bikes/g;
					$cols[$x] =~ s/\bCycles\b/Bikes/g;
					$cols[$x] =~ s/\bBike on CW\b/Bikes/g;
					$cols[$x] =~ s/\bRIght\b/Right/g;
					$cols[$x] =~ s/\bBIKE\b/Bikes/g;
					$cols[$x] =~ s/\bPeds Inside Crosswalk\b/Peds/g;
					$cols[$x] =~ s/\bRigh t\b/Right/g;
					$cols[$x] =~ s/\bPeds\.\b/Peds/g;
					$cols[$x] =~ s/\bPed\.\b/Peds/g;
					$cols[$x] =~ s/\bThr u \b/Thru/g;
					$cols[$x] =~ s/\bRights\b/Right/g;
					$cols[$x] =~ s/\bThur\b/Thru/g;
					$cols[$x] =~ s/\bLefts\b/Left/g;
					$cols[$x] =~ s/\bleft\b/Left/g;
					$cols[$x] =~ s/\bPEDESTRIANS\b/Peds/g;
					$cols[$x] =~ s/\bBikes in roadway\b/Bikes/g;
					$cols[$x] =~ s/\bPed s \b/Peds/g;
					$cols[$x] =~ s/\bThrus\b/Thru/g;
					$cols[$x] =~ s/\bRegular Right\b/Right/g;
					$cols[$x] =~ s/\bPeds4\b/Peds/g;
					$cols[$x] =~ s/\bPeds \(Crosswalk\)\b/Peds/g;
					$cols[$x] =~ s/\bBikies\b/Bikes/g;

					my $mid = ($colmin[$x] + $colmax[$x]) / 2;
					my $best = -1;
					my $bestdist = 999999;
					for (my $y = 0; $y <= $#directions; $y++) {
						my $d = abs($mid - $directionx[$y]);
						if ($d < $bestdist) {
							$best = $y;
							$bestdist = $d;
						}
					}

					$coldir[$x] = $best;
				}

				if (
					$group eq "Peds and Bicycles" ||
					$group eq "Bicycles" ||
					$group eq "BIKES" ||
					$group eq "BIKES PEDS" ||
					$group eq "Bikes" ||
					$group eq "2 - Bicycles" ||
					$group eq "Bike_Peds" ||
					$group eq "Bicycles Only" ||
					$group eq "Bikes/Peds" ||
					$group eq "Bicycle" ||
					$group eq "2 - 2 - Bicycles" ||
					$group eq "Pedal Bikes" ||
					$group eq "Bicycles/Peds" ||
					$group eq "Bikes & Peds" ||
					$group eq "Bikes Peds" ||
					$group eq "Bikes_Peds" ||
					$group eq "Bicycles and Pedestrians" ||
					$group eq "Bicycles/Pedestrians" ||
					$group eq "Bikes / Peds" ||
					$group eq "Peds - Bikes" ||
					$group eq "Pedestrians - Bikes" ||
					$group eq "Bikes / Pedestrians" ||
					$group eq "Bikes - Bank 2" ||
					$group eq "Bicyclists" ||
					$group eq "Bikes (Acting as Pedestrians)" ||
					$group eq "Peds/Bikes" ||
					0
				) {
					for (my $x = 0; $x <= $#cols; $x++) {
						if ($cols[$x] eq "Right") {
							$cols[$x] = "RightBikes";
						} elsif ($cols[$x] eq "Left") {
							$cols[$x] = "LeftBikes";
						} elsif ($cols[$x] eq "Thru") {
							$cols[$x] = "ThruBikes";
						}
					}
				}

				if (
					$group eq "Bank 1" ||
					$group eq "Bank 2" ||
					$group eq "Heavy Vehicles" ||
					$group eq "Trucks" ||
					$group eq "BUS" ||
					$group eq "Pedestrians" ||
					$group eq "truck" ||
					$group eq "TRUCK" ||
					$group eq "bus" ||
					$group eq "Buses" ||
					$group eq "Peds" ||
					$group eq "Bus" ||
					$group eq "School Buses" ||
					$group eq "Heavy Trucks" ||
					$group eq "Truck" ||
					$group eq "Trucks & Bikes" ||
					$group eq "Peds and Bikes" ||
					$group eq "Bus - Heavy Truck" ||
					$group eq "TRUCKS" ||
					$group eq "Trucks (3+ Axles)" ||
					$group eq "TRUCKS & BIKES" ||
					$group eq "Large 2 Axle Vehicles" ||
					$group eq "BUSSES" ||
					$group eq "Peds by Direction" ||
					$group eq "4+ Axle Trucks" ||
					$group eq "3 Axle Vehicles" ||
					$group eq "HV" ||
					$group eq "Trucks/ Bikes" ||
					$group eq "Commercial" ||
					$group eq "Busses" ||
					$group eq "Transit Buses" ||
					$group eq "HVs / Busses" ||
					$group eq "HEAVY VEHICLES" ||
					$group eq "Dump Trucks" ||
					$group eq "Trains" ||
					$group eq "2 - Trucks" ||
					$group eq "Buses & Trucks" ||
					$group eq "BUSES" ||
					$group eq "U-Turns" ||
					$group eq "Heavy" ||
					$group eq "Bicyclists and Pedes" ||
					$group eq "2 - truck" ||
					$group eq "Trucks (3 or more axles)" ||
					$group eq "Pedal Bike (Road)" ||
					$group eq "Heavy Trucks & Buses" ||
					$group eq "HVs and Bikes - Busses" ||
					$group eq "3 - Buses" ||
					$group eq "LARGE 2 AXLE VEHICLES" ||
					$group eq "BC (Trucks)" ||
					$group eq "3 AXLE VEHICLES" ||
					$group eq "Long Combination Vehicles" ||
					$group eq "Heavy Vehicles" ||
					$group eq "Heavy Vehicle" ||
					$group eq "Heavy Truck" ||
					$group eq "SU" ||  # single-unit trucks
					$group eq "TT" ||  # tractor-trailer
					$group eq "Bikes on ST - Bikes on SW" ||
					$group eq "Bikes on ST" ||
					$group eq "Bikes on SW" ||
					$group eq "SU - MU" ||
					$group eq "Bikes Street" ||
					$group eq "Bikes SW" ||
					$group eq "Peds - Bicycles" ||
					$group eq "Heavy Vehicles" ||
					$group eq "HVs / Busses" ||
					$group eq "Dump and 3 or 4 Axle Trucks" ||
					$group eq "3 - bus" ||
					$group eq "trucks" ||
					$group eq "U turns" ||
					$group eq "U Turns" ||
					$group eq "SUs = MUs" ||
					$group eq "Peds and Bicycles" ||
					$group eq "PEDS" ||
					$group eq "Long Combo Vehicles" ||
					$group eq "Long Combination Vehicles (5+ Axles)" ||
					$group eq "Long Combination" ||
					$group eq "Light Trucks" ||
					$group eq "Hazmat Vehicles" ||
					$group eq "HVs / Buses" ||
					$group eq "HAZMAT Vehicles" ||
					$group eq "Buses - Trucks" ||
					$group eq "4+ AXLE TRUCKS" ||
					$group eq "Single Unit Trucks" ||
					$group eq "Long combination vehicles 5+ axles" ||
					$group eq "Hazmat vehicles" ||
					$group eq "Hazmat Trucks" ||
					$group eq "General Trucks (3+ Axles)" ||
					$group eq "Dump trucks and 3/4 axle trucks" ||
					$group eq "Bicycles and Pedestr" ||
					$group eq "2 - Heavy Trucks" ||
					$group eq "Trucks/Shuttles" ||
					$group eq "Trucks and Buses - Semis" ||
					$group eq "Truck (3 or more axles)" ||
					$group eq "Transit and School Buses" ||
					$group eq "TRUCK/BIKE" ||
					$group eq "Semis" ||
					$group eq "Right on Red/Peds" ||
					$group eq "Long combination vehicles (5 or more axles)" ||
					$group eq "Long Combination Vehicles (5 or more axles)" ||
					$group eq "HAZMAT Trucks" ||
					$group eq "HAZMAT" ||
					$group eq "General Trucks" ||
					$group eq "Emergency Vehicles" ||
					$group eq "Buses-Tunnel" ||
					$group eq "Bicycles on Road" ||
					$group eq "5+ Axle Trucks" ||
					$group eq "5 or more axle" ||
					$group eq "3+ Axles" ||
					$group eq "3 - Bus" ||
					$group eq "2 - 2 - Heavy Trucks" ||
					0
				) {
					for (my $x = 0; $x <= $#cols; $x++) {
						if ($cols[$x] eq "Right" ||
						    $cols[$x] eq "Left" ||
						    $cols[$x] eq "Thru") {
							$cols[$x] = "$group $cols[$x]";
						}
					}
				}

				{
					my $apptotal = 0;
					for (my $x = 0; $x <= $#cols; $x++) {
						if ($cols[$x] =~ /App\.*Total/) {
							$apptotal++;
						}
					}

					if ($apptotal == $#directions + 1) {
						my $dir = 0;
						for (my $x = 0; $x <= $#cols; $x++) {
							$coldir[$x] = $dir;
							if ($cols[$x] =~ /App\.*Total/) {
								$dir++;
							}
						}
					}
				}

				my %seen = ();
				for (my $x = 0; $x <= $#cols; $x++) {
					next if $cols[$x] =~ /Total/;  # Don't care if totals columns are misassociated

					if (defined($seen{$directions[$coldir[$x]]}{$cols[$x]})) {
						print STDERR "$ARGV: $street: duplicate column $directions[$coldir[$x]] $cols[$x]\n";
						for (my $y = 0; $y <= $#cols; $y++) {
							# print STDERR "{$directions[$coldir[$y]]}{$cols[$y]}\n";
						}
						next PAGE;
					}
					$seen{$directions[$coldir[$x]]}{$cols[$x]} = 1;

					# print "$streets[$coldir[$x]], $directions[$coldir[$x]]: $cols[$x]: $colmin[$x] to $colmax[$x]\n";
				}

				my $when = -1;
				my %val = ();
				my %valused = ();
				for (; $i <= $#text; $i++) {
					last if ($text[$i] =~ /Grand/);

					if ($text[$i] =~ /(\d+):(\d+) *([AP]M)?/) {
						my $hour = $1;
						my $minute = $2;
						if ($3 eq "PM" && $hour != 12) {
							$hour += 12;
						}
						if ($3 eq "AM" && $hour == 12) {
							$hour = 0;
						}
						$when = $hour * 60 + $minute;

						if ($text[$i + 1] =~ /^ *(\d+) *$/) {
							my $n;
							for ($n = $i + 1; $n <= $#text; $n++) {
								last unless ($text[$n] =~ /^ *(\d+) *$/);
							}

							if ($n - ($i + 1) == $#cols + 1) {
								for (my $m = ($i + 1); $m < $n; $m++) {
									$text[$m] =~ /^ *(\d+) *$/;
									my $v = $1;

									$val{$when}{$directions[$coldir[$m - ($i + 1)]]}{$cols[$m - ($i + 1)]} .= $v;
									$valused{$when}{$directions[$coldir[$m - ($i + 1)]]}{$cols[$m - ($i + 1)]}++;
								}

								$i = $n - 1;
								$when = -1;
								next;
							} else {
								printf STDERR ("$ARGV: have %d values for %d columns\n", $n - ($i + 1), $#cols + 1);
							}
						}
					} elsif ($text[$i] =~ /Total/) {
						$when = -1;
					} elsif ($text[$i] =~ /^ *(\d+) *$/) {
						my $v = $1;
						my $best = -1;
						my $bestd = 999999;
						for (my $x = 0; $x <= $#cols; $x++) {
							my $d = abs($x[$i] - ($colmin[$x] + $colmax[$x]) / 2);
							if ($d < $bestd) {
								$best = $x;
								$bestd = $d;
							}
						}

						if (1) {
							if ($when >= 0 && defined($val{$when}{$directions[$coldir[$best]]}{$cols[$best]})) {
								# Still a bad sign, but we're not using the totals
								unless ($cols[$best] =~ /Total/) {
									# Duplicate of exactly the same value seems harmless
									unless ($val{$when}{$directions[$coldir[$best]]}{$cols[$best]} == $v) {
										print STDERR "$ARGV: already have $val{$when}{$directions[$coldir[$best]]}{$cols[$best]} for val{$when}{$directions[$coldir[$best]]}{$cols[$best]} = $v\n";
										print STDERR "$streets[$coldir[$best]], $directions[$coldir[$best]]: $cols[$best]\n";
										$val{$when}{'fail'} = 1;
										$i = $#text;
									}
								}
							}
						}
						$val{$when}{$directions[$coldir[$best]]}{$cols[$best]} = $v;
						$valused{$when}{$directions[$coldir[$best]]}{$cols[$best]}++;
						# print "val{$when}{$directions[$coldir[$best]]}{$cols[$best]} = $v\n";
					}
				}

				for my $when (sort {$a <=> $b } (keys(%val))) {
					next if $when < 0;
					next if defined($val{$when}{'fail'});
					my $check = "";
					for my $direction (keys(%{$val{$when}})) {
						for my $turn (keys(%{$val{$when}{$direction}})) {
							if ($valused{$when}{$direction}{$turn} > 1) {
								$check = "$direction $turn";
							}
						}
					}

					if ($check ne "") {
						for (my $x = 0; $x <= $#cols; $x++) {
							# print "used: {$when}{$directions[$coldir[$x]]}{$cols[$x]} $valused{$when}{$directions[$coldir[$x]]}{$cols[$x]}\n";
						}
						for (my $x = 0; $x <= $#cols; $x++) {
							if ($valused{$when}{$directions[$coldir[$x]]}{$cols[$x]} == 0) {
								print STDERR "$ARGV: $street: $when: $check used repeatedly, $directions[$coldir[$x]] $cols[$x] not used\n";
								delete $val{$when};
							}
						}
					}
				}

				my $interval = 0;
				{
					my @when = sort { $a <=> $b } (keys(%val));
					for (my $i = 0; $i < $#when; $i++) {
						if ($when[$i] >= 0) {
							my $d = $when[$i + 1] - $when[$i];
							if ($interval == 0 || $d < $interval) {
								$interval = $d;
							}
						}
					}
				}

				for my $when (sort {$a <=> $b } (keys(%val))) {
					next if $when < 0 || $interval == 0;
					next if defined($val{$when}{'fail'});

					my $argv = $ARGV;
					$used{$ARGV} = 1;
					$argv =~ s/xml/txt/g; # XXX
					$argv =~ s/,/ /g; # XXX

					print "$argv,$street,$group,$date,";
					printf("%02d:%02d-%02d:%02d,", $when / 60, $when % 60, ($when + $interval) / 60, ($when + $interval) % 60);

					# Directions to intersection legs
					my %bikemap = ( "Northbound" => "Westbound",
							"Southbound" => "Eastbound",
							"Eastbound" => "Northbound",
							"Westbound" => "Southbound");

					for my $direction (keys(%bikemap)) {
						if (!defined($val{$when}{$bikemap{$direction}}{"Bikes"})) {
							if (defined($val{$when}{$direction}{"ThruBikes"})) {
								$val{$when}{$bikemap{$direction}}{"Bikes"} =
									$val{$when}{$direction}{"ThruBikes"};
								delete $val{$when}{$direction}{"ThruBikes"};
							}
						}
					}

					for my $direction ('Southbound', 'Westbound', 'Northbound', 'Eastbound') {
						for my $turn ('Right', 'Thru', 'Left') {
							print "$val{$when}{$direction}{$turn},";
							delete $val{$when}{$direction}{$turn};
						}
					}

					for my $turn ('Peds', 'Bikes') {
						for my $direction ('Southbound', 'Westbound', 'Northbound', 'Eastbound') {
							print "$val{$when}{$direction}{$turn},";
							delete $val{$when}{$direction}{$turn};
						}
					}

					if ($ARGV =~ /kc\/(.*)\./) {
						print "$lat{$1},$lon{$1}";
					} else {
						print ",";
					}

					for my $direction (keys(%{$val{$when}})) {
						for my $turn (keys(%{$val{$when}{$direction}})) {
							next if $turn =~ /Total/;
							next if $turn =~ /U-Turn/;
							next if $turn =~ /RightBikes/;
							next if $turn =~ /LeftBikes/;

							print ",$direction:$turn:$val{$when}{$direction}{$turn}";
						}
					}

					print "\n";
				}

				# print "\n";
			}
		}

		@x = ();
		@y = ();
		@min = ();
		@max = ();
		@top = ();
		@bot = ();
		@text = ();
		$group = "";
		$date = "";
		$street = "";
	}
}

for my $file (keys(%warn)) {
	unless ($used{$file}) {
		print STDERR "$file: no output\n";
	}
}
