#!/usr/bin/perl

use strict;

my @x = ();
my @y = ();
my @min = ();
my @max = ();
my @text = ();

while (<>) {
	s/<b>//g;
	s/<\/b>//g;

	if (/<text top="([0-9]+)" left="([0-9]+)" width="([0-9]+)" height="([0-9]+)" font="[^"]*">(.*)<\/text>/) {
		my $x = $2 + $3 / 2;
		my $y = $1 + $4 / 2;
		my $text = $5;

		push @x, $x;
		push @y, $y;
		push @min, $2;
		push @max, $2 + $3;
		push @text, $text;
	}

	if (/<\/page/) {
		my $i;
		for ($i = 0; $i <= $#text; $i++) {
			if ($text[$i] =~ /Groups *Printed(.*)/) {
				my $group = $1;
				print "$ARGV\n";
				print "$group\n";
				$i++;

				my @streets = ();
				my @directions = ();
				my @directionx = ();
				my $direction = 0;
				for (; $i <= $#text; $i++) {
					if ($text[$i] =~ /bound$/i || $text[$i] =~ /\([NSEW]B\)$/ || $text[$i] =~ /^From/i || $text[$i] =~ /Leg$/i) {
						$directions[$direction] = $text[$i];
						$directionx[$direction] = $x[$i];

						$directions[$direction] =~ s/ *\([NSEW]B\) *//g;
						$directions[$direction] =~ s/From Northeast/Southwestbound/gi;
						$directions[$direction] =~ s/From Southeast/Northwestbound/gi;
						$directions[$direction] =~ s/From Northwest/Southeastbound/gi;
						$directions[$direction] =~ s/From Southwest/Northeastbound/gi;
						$directions[$direction] =~ s/From North/Southbound/gi;
						$directions[$direction] =~ s/From South/Northbound/gi;
						$directions[$direction] =~ s/From East/Westbound/gi;
						$directions[$direction] =~ s/From West/Eastbound/gi;
						$directions[$direction] =~ s/North Leg/Southbound/gi;
						$directions[$direction] =~ s/South Leg/Northbound/gi;
						$directions[$direction] =~ s/East Leg/Westbound/gi;
						$directions[$direction] =~ s/West Leg/Eastbound/gi;
						$directions[$direction] =~ s/NORTHBOUND/Northbound/gi;
						$directions[$direction] =~ s/SOUTHBOUND/Southbound/gi;
						$directions[$direction] =~ s/\bEASTBOUND/Eastbound/gi;
						$directions[$direction] =~ s/\bWESTBOUND/Westbound/gi;

						$direction++;
					} elsif ($text[$i] =~ /Start/) {
						last;
					} else {
						if ($streets[$direction] eq "") {
							$streets[$direction] = $text[$i]
						} else {
							$streets[$direction] .= " $text[$i]";
						}
					}
				}

				for (my $x = 0; $x <= $#streets; $x++) {
					print "$directions[$x]\n";
				}

				if ($text[$i] =~ /Start/) {
					$i++;
				}
				if ($text[$i] =~ /Time/) {
					$i++;
				}

				my @cols = ();
				my @colmin = ();
				my @colmax = ();
				for (; $i <= $#text; $i++) {
					last if $text[$i] =~ /\d:\d\d/;
					last if $text[$i] =~ /Factor/;

					if ($#colmin >= 0 &&
					    ! ($min[$i] > $colmax[$#colmax] || $max[$i] < $colmin[$#colmin])) {
						$cols[$#cols] .= $text[$i];
						if ($min[$i] < $colmin[$#colmin]) {
							$colmin[$#colmin] = $min[$i];
						}
						if ($max[$i] > $colmax[$#colmax]) {
							$colmax[$#colmax] = $max[$i];
						}
					} else {
						push @cols, $text[$i];
						push @colmin, $min[$i];
						push @colmax, $max[$i];
					}
				}

				my @coldir = ();
				for (my $x = 0; $x <= $#cols; $x++) {
					my $mid = ($colmin[$x] + $colmax[$x]) / 2;
					my $best = -1;
					my $bestdist = 999999;
					for (my $y = 0; $y <= $#directions; $y++) {
						my $d = abs($mid - $directionx[$y]);
						if ($d < $bestdist) {
							$best = $y;
							$bestdist = $d;
						}
					}

					$coldir[$x] = $best;
				}
				for (my $x = 0; $x <= $#cols; $x++) {
					# print "$directions[$coldir[$x]]: $cols[$x]: $colmin[$x] to $colmax[$x]\n";
				}

				my $when = -1;
				my %val = ();
				for (; $i <= $#text; $i++) {
					last if ($text[$i] =~ /Grand/);

					if ($text[$i] =~ /(\d+):(\d+) *([AP]M)?/) {
						my $hour = $1;
						my $minute = $2;
						if ($3 eq "PM" && $hour != 12) {
							$hour += 12;
						}
						$when = $hour * 60 + $minute;
					} elsif ($text[$i] =~ /Total/) {
						$when = -1;
					} elsif ($text[$i] =~ /^ *(\d+) *$/) {
						my $v = $1;
						my $best = -1;
						my $bestd = 999999;
						for (my $x = 0; $x <= $#cols; $x++) {
							my $d = abs($x[$i] - ($colmin[$x] + $colmax[$x]) / 2);
							if ($d < $bestd) {
								$best = $x;
								$bestd = $d;
							}
						}

						if ($when >= 0 && defined($val{$when}{$directions[$coldir[$best]]}{$cols[$best]})) {
							# Still a bad sign, but we're not using the totals
							unless ($cols[$best] =~ /Total/) {
								# Duplicate of exactly the same value seems harmless
								unless ($val{$when}{$directions[$coldir[$best]]}{$cols[$best]} == $v) {
									die "$ARGV: already have $val{$when}{$directions[$coldir[$best]]}{$cols[$best]} for val{$when}{$directions[$coldir[$best]]}{$cols[$best]} = $v\n";
								}
							}
						}
						$val{$when}{$directions[$coldir[$best]]}{$cols[$best]} = $v;
						# print "val{$when}{$directions[$coldir[$best]]}{$cols[$best]} = $v\n";
					}
				}

				my $street = "XXX";
				my $group = "XXX";
				my $date = "XXX";

				for my $when (sort {$a <=> $b } (keys(%val))) {
					next if $when < 0;

					print "$ARGV,$street,$group,$date,";
					printf("%02d:%02d-%02d:%02d,", $when / 60, $when % 60, ($when + 15) / 60, ($when + 15) % 60);

					# Directions to intersection legs
					my %bikemap = ( "Northbound" => "Westbound",
							"Southbound" => "Eastbound",
							"Eastbound" => "Northbound",
							"Westbound" => "Southbound");

					for my $direction (keys(%bikemap)) {
						if (defined($val{$when}{$direction}{"ThruBikes"})) {
							$val{$when}{$bikemap{$direction}}{"Bikes"} =
								$val{$when}{$direction}{"ThruBikes"};
							delete $val{$when}{$direction}{"ThruBikes"};
						}
					}

					for my $direction ('Southbound', 'Westbound', 'Northbound', 'Eastbound') {
						for my $turn ('Right', 'Thru', 'Left') {
							print "$val{$when}{$direction}{$turn},";
							delete $val{$when}{$direction}{$turn};
						}
					}

					for my $turn ('Peds', 'Bikes') {
						for my $direction ('Southbound', 'Westbound', 'Northbound', 'Eastbound') {
							print "$val{$when}{$direction}{$turn},";
							delete $val{$when}{$direction}{$turn};
						}
					}

					print ",";  # XXX

					for my $direction (keys(%{$val{$when}})) {
						for my $turn (keys(%{$val{$when}{$direction}})) {
							next if $turn =~ /Total/;
							next if $turn =~ /U-Turn/;
							next if $turn =~ /RightBikes/;
							next if $turn =~ /LeftBikes/;

							print ",$direction:$turn:$val{$when}{$direction}{$turn}";
						}
					}

					print "\n";
				}

				print "\n";
			}
		}

		@x = ();
		@y = ();
		@min = ();
		@max = ();
		@text = ();
	}
}
